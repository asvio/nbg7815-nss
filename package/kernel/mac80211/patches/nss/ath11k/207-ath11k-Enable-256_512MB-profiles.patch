From 1b402e444ff99efe84d09a084b96c39826783a8e Mon Sep 17 00:00:00 2001
From: Ramya Gnanasekar <rgnanase@codeaurora.org>
Date: Thu, 10 Sep 2020 13:33:55 +0530
Subject: [PATCH] ath11k: Enable 512MB profile in ath11k

Below changes are made to enable 512MB mem mode in ath11k
        * Makefile changes to implement compilation flag when
                512MB mem profile is configured.
        * Enabling 512MB mem profile by default from Makefile
                for IPQ5018. This can be removed later once
                512MB profile config is supported.
        * Update target_mem_mode, number of stations, peer and vap
                during compile time

Signed-off-by: Ramya Gnanasekar <rgnanase@codeaurora.org>
---
 drivers/net/wireless/ath/ath11k/Kconfig |  7 +++++++
 drivers/net/wireless/ath/ath11k/hw.h    | 14 +++++++++++---
 drivers/net/wireless/ath/ath11k/qmi.c   |  2 +-
 drivers/net/wireless/ath/ath11k/qmi.h   |  6 +++++-
 4 files changed, 24 insertions(+), 5 deletions(-)

--- a/drivers/net/wireless/ath/ath11k/Kconfig
+++ b/drivers/net/wireless/ath/ath11k/Kconfig
@@ -23,6 +23,20 @@ config ATH11K_NSS_SUPPORT
 
 	  If unsure, say Y to enable NSS offload support.
 
+config ATH11K_MEM_PROFILE_512M
+	bool "ath11k enable 512MB memory profile"
+	depends on ATH11K
+	default n
+	---help---
+	Enables 512MB memory profile for ath11k
+
+config ATH11K_MEM_PROFILE_256M
+	bool "ath11k enable 256MB memory profile"
+	depends on ATH11K
+	default n
+	---help---
+	Enables 256MB memory profile for ath11k
+
 config ATH11K_AHB
 	tristate "Atheros ath11k AHB support"
 	depends on m
--- a/drivers/net/wireless/ath/ath11k/hw.h
+++ b/drivers/net/wireless/ath/ath11k/hw.h
@@ -11,11 +11,29 @@
 #include "wmi.h"
 
 /* Target configuration defines */
+#ifdef CPTCFG_ATH11K_MEM_PROFILE_512M
 
+#define TARGET_NUM_VDEVS(ab)	8
+#define TARGET_NUM_PEERS_PDEV(ab)	(128 + TARGET_NUM_VDEVS(ab))
+/* Max num of stations (per radio) */
+#define TARGET_NUM_STATIONS(ab)	128
+#define ATH11K_QMI_TARGET_MEM_MODE	ATH11K_QMI_TARGET_MEM_MODE_512M
+#define ATH11K_DP_TX_COMP_RING_SIZE	8192
+#define ATH11K_DP_RXDMA_MON_STATUS_RING_SIZE	512
+#define ATH11K_DP_RXDMA_MONITOR_BUF_RING_SIZE	128
+#define ATH11K_DP_RXDMA_MONITOR_DST_RING_SIZE	128
+#else
 /* Num VDEVS per radio */
-#define TARGET_NUM_VDEVS(ab)	(ab->hw_params.num_vdevs)
-
-#define TARGET_NUM_PEERS_PDEV(ab) (ab->hw_params.num_peers + TARGET_NUM_VDEVS(ab))
+#define TARGET_NUM_VDEVS(ab)	(ab->hw_params.num_vdevs_peers[ab->qmi.target_mem_mode].num_vdevs)
+#define TARGET_NUM_PEERS_PDEV(ab) (ab->hw_params.num_vdevs_peers[ab->qmi.target_mem_mode].num_peers + TARGET_NUM_VDEVS(ab))
+/* Max num of stations (per radio) */
+#define TARGET_NUM_STATIONS(ab) (ab->hw_params.num_vdevs_peers[ab->qmi.target_mem_mode].num_peers)
+#define ATH11K_QMI_TARGET_MEM_MODE		ATH11K_QMI_TARGET_MEM_MODE_DEFAULT
+#define ATH11K_DP_TX_COMP_RING_SIZE		32768
+#define ATH11K_DP_RXDMA_MON_STATUS_RING_SIZE	1024
+#define ATH11K_DP_RXDMA_MONITOR_BUF_RING_SIZE	4096
+#define ATH11K_DP_RXDMA_MONITOR_DST_RING_SIZE	2048
+#endif
 
 /* Num of peers for Single Radio mode */
 #define TARGET_NUM_PEERS_SINGLE(ab) (TARGET_NUM_PEERS_PDEV(ab))
@@ -26,9 +44,6 @@
 /* Num of peers for DBS_SBS */
 #define TARGET_NUM_PEERS_DBS_SBS(ab)	(3 * TARGET_NUM_PEERS_PDEV(ab))
 
-/* Max num of stations (per radio) */
-#define TARGET_NUM_STATIONS(ab)	(ab->hw_params.num_peers)
-
 #define TARGET_NUM_PEERS(ab, x)	TARGET_NUM_PEERS_##x(ab)
 #define TARGET_NUM_PEER_KEYS	2
 #define TARGET_NUM_TIDS(ab, x)	(2 * TARGET_NUM_PEERS(ab, x) +	\
@@ -226,6 +241,7 @@ struct ath11k_hw_params {
 	u32 tx_ring_size;
 	bool smp2p_wow_exit;
 	bool support_fw_mac_sequence;
+	const struct ath11k_num_vdevs_peers *num_vdevs_peers;
 };
 
 struct ath11k_hw_ops {
--- a/drivers/net/wireless/ath/ath11k/qmi.h
+++ b/drivers/net/wireless/ath/ath11k/qmi.h
@@ -29,6 +29,12 @@
 #define ATH11K_QMI_BDF_EXT_STR_LENGTH		0x20
 #define ATH11K_QMI_FW_MEM_REQ_SEGMENT_CNT	5
 
+#ifdef CPTCFG_ATH11K_MEM_PROFILE_512M
+#define ATH11K_QMI_IPQ8074_M3_DUMP_ADDRESS     0x4E800000
+#else
+#define ATH11K_QMI_IPQ8074_M3_DUMP_ADDRESS     0x51000000
+#endif
+
 #define QMI_WLFW_REQUEST_MEM_IND_V01		0x0035
 #define QMI_WLFW_FW_MEM_READY_IND_V01		0x0037
 #define QMI_WLFW_COLD_BOOT_CAL_DONE_IND_V01	0x003E
@@ -42,6 +48,11 @@
 #define ATH11K_QMI_DEVICE_BAR_SIZE		0x200000
 
 struct ath11k_base;
+enum ath11k_target_mem_mode {
+ 	ATH11K_QMI_TARGET_MEM_MODE_DEFAULT = 0,
+ 	ATH11K_QMI_TARGET_MEM_MODE_512M,
+	ATH11K_QMI_TARGET_MEM_MODE_256M,
+};
 
 enum ath11k_qmi_file_type {
 	ATH11K_QMI_FILE_TYPE_BDF_GOLDEN,
--- a/local-symbols
+++ b/local-symbols
@@ -171,6 +171,8 @@ ATH11K=
 ATH11K_AHB=
 ATH11K_PCI=
 ATH11K_NSS_SUPPORT=
+ATH11K_MEM_PROFILE_256M=
+ATH11K_MEM_PROFILE_512M=
 ATH11K_DEBUG=
 ATH11K_DEBUGFS=
 ATH11K_TRACING=
--- a/drivers/net/wireless/ath/ath11k/core.h
+++ b/drivers/net/wireless/ath/ath11k/core.h
@@ -887,6 +887,11 @@ struct ath11k_msi_config {
 	u16 hw_rev;
 };
 
+struct ath11k_num_vdevs_peers {
+	u32 num_vdevs;
+	u32 num_peers;
+};
+
 /* Master structure to hold the hw data which may be used in core module */
 struct ath11k_base {
 	enum ath11k_hw_rev hw_rev;
@@ -1032,6 +1037,8 @@ struct ath11k_base {
 		const struct ath11k_pci_ops *ops;
 	} pci;
 
+	atomic_t num_max_allowed;
+
 #ifdef CPTCFG_NL80211_TESTMODE
 	struct {
 		u32 data_pos;
--- a/drivers/net/wireless/ath/ath11k/dp.h
+++ b/drivers/net/wireless/ath/ath11k/dp.h
@@ -206,8 +206,9 @@ struct ath11k_pdev_dp {
 #define DP_WBM_RELEASE_RING_SIZE	64
 #define DP_TCL_DATA_RING_SIZE		512
 #define DP_TCL_DATA_RING_SIZE_WCN6750	2048
-#define DP_TX_COMP_RING_SIZE		32768
+#define DP_TX_COMP_RING_SIZE		ATH11K_DP_TX_COMP_RING_SIZE
 #define DP_TX_IDR_SIZE			DP_TX_COMP_RING_SIZE
+#define DP_TX_COMP_MAX_ALLOWED         DP_TX_COMP_RING_SIZE
 #define DP_TCL_CMD_RING_SIZE		32
 #define DP_TCL_STATUS_RING_SIZE		32
 #define DP_REO_DST_RING_MAX		4
@@ -220,9 +221,9 @@ struct ath11k_pdev_dp {
 #define DP_RXDMA_BUF_RING_SIZE		4096
 #define DP_RXDMA_REFILL_RING_SIZE	2048
 #define DP_RXDMA_ERR_DST_RING_SIZE	1024
-#define DP_RXDMA_MON_STATUS_RING_SIZE	1024
-#define DP_RXDMA_MONITOR_BUF_RING_SIZE	4096
-#define DP_RXDMA_MONITOR_DST_RING_SIZE	2048
+#define DP_RXDMA_MON_STATUS_RING_SIZE	ATH11K_DP_RXDMA_MON_STATUS_RING_SIZE
+#define DP_RXDMA_MONITOR_BUF_RING_SIZE	ATH11K_DP_RXDMA_MONITOR_BUF_RING_SIZE
+#define DP_RXDMA_MONITOR_DST_RING_SIZE	ATH11K_DP_RXDMA_MONITOR_BUF_RING_SIZE
 #define DP_RXDMA_MONITOR_DESC_RING_SIZE	4096
 
 #define DP_RX_RELEASE_RING_NUM	3
--- a/drivers/net/wireless/ath/ath11k/dp_tx.c
+++ b/drivers/net/wireless/ath/ath11k/dp_tx.c
@@ -334,6 +334,7 @@ tcl_ring_sel:
 			skb->data, skb->len);
 
 	atomic_inc(&ar->dp.num_tx_pending);
+	atomic_inc(&ab->num_max_allowed);
 
 	return 0;
 
@@ -380,6 +381,7 @@ static void ath11k_dp_tx_free_txbuf(stru
 	ar = ab->pdevs[mac_id].ar;
 	if (atomic_dec_and_test(&ar->dp.num_tx_pending))
 		wake_up(&ar->dp.tx_empty_waitq);
+	atomic_dec(&ab->num_max_allowed);
 }
 
 static void
@@ -411,6 +413,7 @@ ath11k_dp_tx_htt_tx_complete_buf(struct
 
 	if (atomic_dec_and_test(&ar->dp.num_tx_pending))
 		wake_up(&ar->dp.tx_empty_waitq);
+	atomic_dec(&ab->num_max_allowed);
 
 	dma_unmap_single(ab->dev, skb_cb->paddr, msdu->len, DMA_TO_DEVICE);
 
@@ -825,6 +828,7 @@ void ath11k_dp_tx_completion_handler(str
 			wake_up(&ar->dp.tx_empty_waitq);
 
 		ath11k_dp_tx_complete_msdu(ar, msdu, &ts);
+		atomic_dec(&ab->num_max_allowed);
 	}
 }
 
--- a/drivers/net/wireless/ath/ath11k/core.c
+++ b/drivers/net/wireless/ath/ath11k/core.c
@@ -42,6 +42,8 @@ bool ath11k_ftm_mode;
 module_param_named(ftm_mode, ath11k_ftm_mode, bool, 0444);
 MODULE_PARM_DESC(ftm_mode, "Boots up in factory test mode");
 
+static const struct ath11k_num_vdevs_peers ath11k_vdevs_peers[];
+
 static struct ath11k_hw_params ath11k_hw_params[] = {
 	{
 		.hw_rev = ATH11K_HW_IPQ8074,
@@ -127,6 +129,7 @@ static struct ath11k_hw_params ath11k_hw
 		.tcl_ring_retry = true,
 		.tx_ring_size = DP_TCL_DATA_RING_SIZE,
 		.smp2p_wow_exit = false,
+		.num_vdevs_peers = ath11k_vdevs_peers,
 	},
 	{
 		.hw_rev = ATH11K_HW_IPQ6018_HW10,
@@ -177,7 +180,7 @@ static struct ath11k_hw_params ath11k_hw
 		.coldboot_cal_mm = false,
 		.coldboot_cal_ftm = false,
 		.cbcal_restart_fw = true,
-		.fw_mem_mode = 0,
+		.fw_mem_mode = ATH11K_QMI_TARGET_MEM_MODE,
 		.num_vdevs = 16 + 1,
 		.num_peers = 512,
 		.supports_suspend = false,
@@ -259,7 +262,7 @@ static struct ath11k_hw_params ath11k_hw
 		.coldboot_cal_mm = false,
 		.coldboot_cal_ftm = false,
 		.cbcal_restart_fw = false,
-		.fw_mem_mode = 0,
+		.fw_mem_mode = ATH11K_QMI_TARGET_MEM_MODE,
 		.num_vdevs = 16 + 1,
 		.num_peers = 512,
 		.supports_suspend = true,
@@ -426,7 +429,7 @@ static struct ath11k_hw_params ath11k_hw
 		.coldboot_cal_mm = false,
 		.coldboot_cal_ftm = false,
 		.cbcal_restart_fw = false,
-		.fw_mem_mode = 0,
+		.fw_mem_mode = ATH11K_QMI_TARGET_MEM_MODE,
 		.num_vdevs = 16 + 1,
 		.num_peers = 512,
 		.supports_suspend = true,
@@ -462,6 +465,7 @@ static struct ath11k_hw_params ath11k_hw
 		.tx_ring_size = DP_TCL_DATA_RING_SIZE,
 		.smp2p_wow_exit = false,
 		.support_fw_mac_sequence = true,
+		.num_vdevs_peers = ath11k_vdevs_peers,
 	},
 	{
 		.name = "wcn6855 hw2.1",
@@ -509,7 +513,7 @@ static struct ath11k_hw_params ath11k_hw
 		.coldboot_cal_mm = false,
 		.coldboot_cal_ftm = false,
 		.cbcal_restart_fw = false,
-		.fw_mem_mode = 0,
+		.fw_mem_mode = ATH11K_QMI_TARGET_MEM_MODE,
 		.num_vdevs = 16 + 1,
 		.num_peers = 512,
 		.supports_suspend = true,
@@ -545,6 +549,7 @@ static struct ath11k_hw_params ath11k_hw
 		.tx_ring_size = DP_TCL_DATA_RING_SIZE,
 		.smp2p_wow_exit = false,
 		.support_fw_mac_sequence = true,
+		.num_vdevs_peers = ath11k_vdevs_peers,
 	},
 	{
 		.name = "wcn6750 hw1.0",
@@ -593,7 +598,7 @@ static struct ath11k_hw_params ath11k_hw
 		.coldboot_cal_mm = true,
 		.coldboot_cal_ftm = true,
 		.cbcal_restart_fw = false,
-		.fw_mem_mode = 0,
+		.fw_mem_mode = ATH11K_QMI_TARGET_MEM_MODE,
 		.num_vdevs = 16 + 1,
 		.num_peers = 512,
 		.supports_suspend = false,
@@ -672,7 +677,7 @@ static struct ath11k_hw_params ath11k_hw
 		.supports_monitor = false,
 		.supports_sta_ps = false,
 		.supports_shadow_regs = false,
-		.fw_mem_mode = 0,
+		.fw_mem_mode = ATH11K_QMI_TARGET_MEM_MODE,
 		.num_vdevs = 16 + 1,
 		.num_peers = 512,
 		.supports_regdb = false,
@@ -707,6 +712,22 @@ static struct ath11k_hw_params ath11k_hw
 		.tx_ring_size = DP_TCL_DATA_RING_SIZE,
 		.smp2p_wow_exit = false,
 		.support_fw_mac_sequence = false,
+		.num_vdevs_peers = ath11k_vdevs_peers,
+	},
+};
+
+static const struct ath11k_num_vdevs_peers ath11k_vdevs_peers[] = {
+	{
+		.num_vdevs = (16 + 1),
+		.num_peers = 512,
+	},
+	{
+		.num_vdevs = (8 + 1),
+		.num_peers = 128,
+	},
+	{
+		.num_vdevs = 8,
+		.num_peers = 128,
 	},
 };
 
