reverted:
--- a/drivers/net/wireless/ath/ath11k/Kconfig
+++ b/drivers/net/wireless/ath/ath11k/Kconfig
@@ -32,20 +32,6 @@ config ATH11K_NSS_MESH_SUPPORT
 
 	  If unsure, say Y to enable NSS offload support.
 
-config ATH11K_MEM_PROFILE_512M
-	bool "ath11k enable 512MB memory profile"
-	depends on ATH11K
-	default n
-	---help---
-	Enables 512MB memory profile for ath11k
-
-config ATH11K_MEM_PROFILE_256M
-	bool "ath11k enable 256MB memory profile"
-	depends on ATH11K
-	default n
-	---help---
-	Enables 256MB memory profile for ath11k
-
 config ATH11K_AHB
 	tristate "Atheros ath11k AHB support"
 	depends on m
--- a/drivers/net/wireless/ath/ath11k/hw.h
+++ b/drivers/net/wireless/ath/ath11k/hw.h
@@ -11,29 +11,11 @@
 #include "wmi.h"
 
 /* Target configuration defines */
-#ifdef CPTCFG_ATH11K_MEM_PROFILE_512M
 
-#define TARGET_NUM_VDEVS(ab)	8
-#define TARGET_NUM_PEERS_PDEV(ab)	(128 + TARGET_NUM_VDEVS(ab))
-/* Max num of stations (per radio) */
-#define TARGET_NUM_STATIONS(ab)	128
-#define ATH11K_QMI_TARGET_MEM_MODE	ATH11K_QMI_TARGET_MEM_MODE_512M
-#define ATH11K_DP_TX_COMP_RING_SIZE	8192
-#define ATH11K_DP_RXDMA_MON_STATUS_RING_SIZE	512
-#define ATH11K_DP_RXDMA_MONITOR_BUF_RING_SIZE	128
-#define ATH11K_DP_RXDMA_MONITOR_DST_RING_SIZE	128
-#else
 /* Num VDEVS per radio */
-#define TARGET_NUM_VDEVS(ab)	(ab->hw_params.num_vdevs_peers[ab->qmi.target_mem_mode].num_vdevs)
-#define TARGET_NUM_PEERS_PDEV(ab) (ab->hw_params.num_vdevs_peers[ab->qmi.target_mem_mode].num_peers + TARGET_NUM_VDEVS(ab))
-/* Max num of stations (per radio) */
-#define TARGET_NUM_STATIONS(ab) (ab->hw_params.num_vdevs_peers[ab->qmi.target_mem_mode].num_peers)
-#define ATH11K_QMI_TARGET_MEM_MODE		ATH11K_QMI_TARGET_MEM_MODE_DEFAULT
-#define ATH11K_DP_TX_COMP_RING_SIZE		32768
-#define ATH11K_DP_RXDMA_MON_STATUS_RING_SIZE	1024
-#define ATH11K_DP_RXDMA_MONITOR_BUF_RING_SIZE	4096
-#define ATH11K_DP_RXDMA_MONITOR_DST_RING_SIZE	2048
-#endif
+#define TARGET_NUM_VDEVS(ab)	(ab->hw_params.num_vdevs)
+
+#define TARGET_NUM_PEERS_PDEV(ab) (ab->hw_params.num_peers + TARGET_NUM_VDEVS(ab))
 
 /* Num of peers for Single Radio mode */
 #define TARGET_NUM_PEERS_SINGLE(ab) (TARGET_NUM_PEERS_PDEV(ab))
@@ -44,6 +26,9 @@
 /* Num of peers for DBS_SBS */
 #define TARGET_NUM_PEERS_DBS_SBS(ab)	(3 * TARGET_NUM_PEERS_PDEV(ab))
 
+/* Max num of stations (per radio) */
+#define TARGET_NUM_STATIONS(ab)	(ab->hw_params.num_peers)
+
 #define TARGET_NUM_PEERS(ab, x)	TARGET_NUM_PEERS_##x(ab)
 #define TARGET_NUM_PEER_KEYS	2
 #define TARGET_NUM_TIDS(ab, x)	(2 * TARGET_NUM_PEERS(ab, x) +	\
@@ -241,7 +226,6 @@ struct ath11k_hw_params {
 	u32 tx_ring_size;
 	bool smp2p_wow_exit;
 	bool support_fw_mac_sequence;
-	const struct ath11k_num_vdevs_peers *num_vdevs_peers;
 	bool support_dual_stations;
 };
 
--- a/drivers/net/wireless/ath/ath11k/qmi.h
+++ b/drivers/net/wireless/ath/ath11k/qmi.h
@@ -29,12 +29,6 @@
 #define ATH11K_QMI_BDF_EXT_STR_LENGTH		0x20
 #define ATH11K_QMI_FW_MEM_REQ_SEGMENT_CNT	5
 
-#ifdef CPTCFG_ATH11K_MEM_PROFILE_512M
-#define ATH11K_QMI_IPQ8074_M3_DUMP_ADDRESS     0x4E800000
-#else
-#define ATH11K_QMI_IPQ8074_M3_DUMP_ADDRESS     0x51000000
-#endif
-
 #define QMI_WLFW_REQUEST_MEM_IND_V01		0x0035
 #define QMI_WLFW_FW_MEM_READY_IND_V01		0x0037
 #define QMI_WLFW_COLD_BOOT_CAL_DONE_IND_V01	0x003E
@@ -48,11 +42,6 @@
 #define ATH11K_QMI_DEVICE_BAR_SIZE		0x200000
 
 struct ath11k_base;
-enum ath11k_target_mem_mode {
- 	ATH11K_QMI_TARGET_MEM_MODE_DEFAULT = 0,
- 	ATH11K_QMI_TARGET_MEM_MODE_512M,
-	ATH11K_QMI_TARGET_MEM_MODE_256M,
-};
 
 enum ath11k_qmi_file_type {
 	ATH11K_QMI_FILE_TYPE_BDF_GOLDEN,
--- a/local-symbols
+++ b/local-symbols
@@ -167,8 +167,6 @@ ATH11K_AHB=
 ATH11K_PCI=
 ATH11K_NSS_SUPPORT=
 ATH11K_NSS_MESH_SUPPORT=
-ATH11K_MEM_PROFILE_256M=
-ATH11K_MEM_PROFILE_512M=
 ATH11K_DEBUG=
 ATH11K_DEBUGFS=
 ATH11K_DEBUGFS_STA=
--- a/drivers/net/wireless/ath/ath11k/core.h
+++ b/drivers/net/wireless/ath/ath11k/core.h
@@ -985,11 +985,6 @@ struct ath11k_msi_config {
 	u16 hw_rev;
 };
 
-struct ath11k_num_vdevs_peers {
-	u32 num_vdevs;
-	u32 num_peers;
-};
-
 /* Master structure to hold the hw data which may be used in core module */
 struct ath11k_base {
 	enum ath11k_hw_rev hw_rev;
@@ -1135,8 +1130,6 @@ struct ath11k_base {
 		DECLARE_BITMAP(fw_features, ATH11K_FW_FEATURE_COUNT);
 	} fw;
 
-	atomic_t num_max_allowed;
-
 #ifdef CPTCFG_NL80211_TESTMODE
 	struct {
 		u32 data_pos;
--- a/drivers/net/wireless/ath/ath11k/dp.h
+++ b/drivers/net/wireless/ath/ath11k/dp.h
@@ -93,7 +93,7 @@ struct idr_entry {
 	void *buf;
 };
 
-#define DP_TX_IDR_SIZE	ATH11K_DP_TX_COMP_RING_SIZE
+#define DP_TX_IDR_SIZE	32768
 
 struct dp_tx_ring {
 	u8 tcl_data_ring_id;
@@ -225,8 +225,7 @@ struct ath11k_pdev_dp {
 #define DP_WBM_RELEASE_RING_SIZE	64
 #define DP_TCL_DATA_RING_SIZE		512
 #define DP_TCL_DATA_RING_SIZE_WCN6750	2048
-#define DP_TX_COMP_RING_SIZE		ATH11K_DP_TX_COMP_RING_SIZE
-#define DP_TX_COMP_MAX_ALLOWED         DP_TX_COMP_RING_SIZE
+#define DP_TX_COMP_RING_SIZE		32768
 #define DP_TCL_CMD_RING_SIZE		32
 #define DP_TCL_STATUS_RING_SIZE		32
 #define DP_REO_DST_RING_MAX		4
@@ -239,9 +238,9 @@ struct ath11k_pdev_dp {
 #define DP_RXDMA_BUF_RING_SIZE		4096
 #define DP_RXDMA_REFILL_RING_SIZE	2048
 #define DP_RXDMA_ERR_DST_RING_SIZE	1024
-#define DP_RXDMA_MON_STATUS_RING_SIZE	ATH11K_DP_RXDMA_MON_STATUS_RING_SIZE
-#define DP_RXDMA_MONITOR_BUF_RING_SIZE	ATH11K_DP_RXDMA_MONITOR_BUF_RING_SIZE
-#define DP_RXDMA_MONITOR_DST_RING_SIZE	ATH11K_DP_RXDMA_MONITOR_BUF_RING_SIZE
+#define DP_RXDMA_MON_STATUS_RING_SIZE	1024
+#define DP_RXDMA_MONITOR_BUF_RING_SIZE	4096
+#define DP_RXDMA_MONITOR_DST_RING_SIZE	2048
 #define DP_RXDMA_MONITOR_DESC_RING_SIZE	4096
 
 #define DP_RX_RELEASE_RING_NUM	3
--- a/drivers/net/wireless/ath/ath11k/dp_tx.c
+++ b/drivers/net/wireless/ath/ath11k/dp_tx.c
@@ -132,12 +132,6 @@ int ath11k_dp_tx(struct ath11k *ar, stru
 
 	max_tx_ring = ab->hw_params.max_tx_ring;
 
-#ifdef CPTCFG_ATH11K_MEM_PROFILE_512M
-	if (unlikely(atomic_read(&ab->num_max_allowed) > DP_TX_COMP_MAX_ALLOWED)) {
-		atomic_inc(&ab->soc_stats.tx_err.max_fail);
-		return -ENOSPC;
-	}
-#endif
 	ring_selector = smp_processor_id();;
 	pool_id = ring_selector;
 
@@ -327,7 +321,6 @@ tcl_ring_sel:
 					 sizeof(struct hal_tlv_hdr), &ti);
 
 	atomic_inc(&ar->dp.num_tx_pending);
-	atomic_inc(&ab->num_max_allowed);
 	ath11k_hal_srng_access_end(ab, tcl_ring);
 
 	ath11k_dp_shadow_start_timer(ab, tcl_ring, &dp->tx_ring_timer[ti.buf_id]);
@@ -882,12 +875,6 @@ void ath11k_dp_tx_completion_handler(str
 
 	spin_unlock_bh(&status_ring->lock);
 
-	if (atomic_sub_return(count, &ab->num_max_allowed) < 0) {
-		ath11k_warn(ab, "tx completion mismatch count %d ring id %d max_num %d\n",
-			    count, tx_ring->tcl_data_ring_id,
-			    atomic_read(&ab->num_max_allowed));
-	}
-
 	while (count--) {
 		msdu=NULL;
 		tx_status = &tx_ring->tx_status[i++];
--- a/drivers/net/wireless/ath/ath11k/core.c
+++ b/drivers/net/wireless/ath/ath11k/core.c
@@ -43,8 +43,6 @@ bool ath11k_ftm_mode;
 module_param_named(ftm_mode, ath11k_ftm_mode, bool, 0444);
 MODULE_PARM_DESC(ftm_mode, "Boots up in factory test mode");
 
-static const struct ath11k_num_vdevs_peers ath11k_vdevs_peers[];
-
 static struct ath11k_hw_params ath11k_hw_params[] = {
 	{
 		.hw_rev = ATH11K_HW_IPQ8074,
@@ -130,7 +128,6 @@ static struct ath11k_hw_params ath11k_hw
 		.tcl_ring_retry = true,
 		.tx_ring_size = DP_TCL_DATA_RING_SIZE,
 		.smp2p_wow_exit = false,
-		.num_vdevs_peers = ath11k_vdevs_peers,
 		.support_dual_stations = false,
 	},
 	{
@@ -182,7 +179,7 @@ static struct ath11k_hw_params ath11k_hw
 		.coldboot_cal_mm = false,
 		.coldboot_cal_ftm = false,
 		.cbcal_restart_fw = true,
-		.fw_mem_mode = ATH11K_QMI_TARGET_MEM_MODE,
+		.fw_mem_mode = 0,
 		.num_vdevs = 16 + 1,
 		.num_peers = 512,
 		.supports_suspend = false,
@@ -269,7 +266,7 @@ static struct ath11k_hw_params ath11k_hw
 		.coldboot_cal_mm = false,
 		.coldboot_cal_ftm = false,
 		.cbcal_restart_fw = false,
-		.fw_mem_mode = ATH11K_QMI_TARGET_MEM_MODE,
+		.fw_mem_mode = 0,
 		.num_vdevs = 2 + 1,
 		.num_peers = 512,
 		.supports_suspend = true,
@@ -442,7 +439,7 @@ static struct ath11k_hw_params ath11k_hw
 		.coldboot_cal_mm = false,
 		.coldboot_cal_ftm = false,
 		.cbcal_restart_fw = false,
-		.fw_mem_mode = ATH11K_QMI_TARGET_MEM_MODE,
+		.fw_mem_mode = 0,
 		.num_vdevs = 2 + 1,
 		.num_peers = 512,
 		.supports_suspend = true,
@@ -478,7 +475,6 @@ static struct ath11k_hw_params ath11k_hw
 		.tx_ring_size = DP_TCL_DATA_RING_SIZE,
 		.smp2p_wow_exit = false,
 		.support_fw_mac_sequence = true,
-		.num_vdevs_peers = ath11k_vdevs_peers,
 		.support_dual_stations = true,
 	},
 	{
@@ -530,7 +526,7 @@ static struct ath11k_hw_params ath11k_hw
 		.coldboot_cal_mm = false,
 		.coldboot_cal_ftm = false,
 		.cbcal_restart_fw = false,
-		.fw_mem_mode = ATH11K_QMI_TARGET_MEM_MODE,
+		.fw_mem_mode = 0,
 		.num_vdevs = 2 + 1,
 		.num_peers = 512,
 		.supports_suspend = true,
@@ -566,7 +562,6 @@ static struct ath11k_hw_params ath11k_hw
 		.tx_ring_size = DP_TCL_DATA_RING_SIZE,
 		.smp2p_wow_exit = false,
 		.support_fw_mac_sequence = true,
-		.num_vdevs_peers = ath11k_vdevs_peers,
 		.support_dual_stations = true,
 	},
 	{
@@ -616,7 +611,7 @@ static struct ath11k_hw_params ath11k_hw
 		.coldboot_cal_mm = true,
 		.coldboot_cal_ftm = true,
 		.cbcal_restart_fw = false,
-		.fw_mem_mode = ATH11K_QMI_TARGET_MEM_MODE,
+		.fw_mem_mode = 0,
 		.num_vdevs = 3,
 		.num_peers = 512,
 		.supports_suspend = false,
@@ -696,7 +691,7 @@ static struct ath11k_hw_params ath11k_hw
 		.supports_monitor = false,
 		.supports_sta_ps = false,
 		.supports_shadow_regs = false,
-		.fw_mem_mode = ATH11K_QMI_TARGET_MEM_MODE,
+		.fw_mem_mode = 0,
 		.num_vdevs = 16 + 1,
 		.num_peers = 512,
 		.supports_regdb = false,
@@ -731,7 +726,6 @@ static struct ath11k_hw_params ath11k_hw
 		.tx_ring_size = DP_TCL_DATA_RING_SIZE,
 		.smp2p_wow_exit = false,
 		.support_fw_mac_sequence = false,
-		.num_vdevs_peers = ath11k_vdevs_peers,
 		.support_dual_stations = false,
 	},
 	{
@@ -825,21 +819,6 @@ static struct ath11k_hw_params ath11k_hw
 	},
 };
 
-static const struct ath11k_num_vdevs_peers ath11k_vdevs_peers[] = {
-	{
-		.num_vdevs = (16 + 1),
-		.num_peers = 512,
-	},
-	{
-		.num_vdevs = (8 + 1),
-		.num_peers = 128,
-	},
-	{
-		.num_vdevs = 8,
-		.num_peers = 128,
-	},
-};
-
 static inline struct ath11k_pdev *ath11k_core_get_single_pdev(struct ath11k_base *ab)
 {
 	WARN_ON(!ab->hw_params.single_pdev_only);
