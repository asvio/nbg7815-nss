From 9cdb8bae50aca80b593d0f53be5b8efedfc91324 Mon Sep 17 00:00:00 2001
From: Tamizh Chelvam <tamizhr@codeaurora.org>
Date: Sun, 7 Mar 2021 22:49:26 +0530
Subject: [PATCH] backport: Compile fix

Adding these changes to fix compilation issue due to
package upgrade

Signed-off-by: Tamizh Chelvam <tamizhr@codeaurora.org>
Signed-off-by: Gautham Kumar Senthilkumaran <quic_gauthamk@quicinc.com>
---
 include/linux/backport-refcount.h        |  4 +--
 include/net/fq.h                         | 10 +++++-
 net/mac80211/cfg.c                       |  4 +--
 net/mac80211/ieee80211_i.h               |  4 ++-
 net/mac80211/iface.c                     |  2 --
 net/mac80211/rx.c                        | 23 +++++++++-----
 net/mac80211/tx.c                        | 54 ++++++++++++++++++++++----------
 7 files changed, 40 insertions(+), 23 deletions(-)

--- a/include/linux/backport-refcount.h
+++ b/include/linux/backport-refcount.h
@@ -247,7 +247,7 @@ static inline __must_check bool refcount
 
 static inline void __refcount_inc(refcount_t *r, int *oldp)
 {
-	__refcount_add(1, r, oldp);
+	refcount_add(1, r);
 }
 
 /**
--- a/net/mac80211/ieee80211_i.h
+++ b/net/mac80211/ieee80211_i.h
@@ -207,6 +207,7 @@ enum ieee80211_rx_flags {
 };
 
 struct ieee80211_rx_data {
+	struct napi_struct *napi;
 	struct list_head *list;
 	struct sk_buff *skb;
 	struct ieee80211_local *local;
@@ -292,6 +293,7 @@ struct unsol_bcast_probe_resp_data {
 	u8 data[];
 };
 
+
 struct ps_data {
 	/* yes, this looks ugly, but guarantees that we can later use
 	 * bitmap_empty :)
--- a/net/mac80211/iface.c
+++ b/net/mac80211/iface.c
@@ -1705,7 +1705,6 @@ static void ieee80211_iface_work(struct
 
 	/* first process frames */
 	while ((skb = skb_dequeue(&sdata->skb_queue))) {
-		kcov_remote_start_common(skb_get_kcov_handle(skb));
 
 		if (skb->protocol == cpu_to_be16(ETH_P_TDLS))
 			ieee80211_process_tdls_channel_switch(sdata, skb);
@@ -1713,17 +1712,14 @@ static void ieee80211_iface_work(struct
 			ieee80211_iface_process_skb(local, sdata, skb);
 
 		kfree_skb(skb);
-		kcov_remote_stop();
 	}
 
 	/* process status queue */
 	while ((skb = skb_dequeue(&sdata->status_queue))) {
-		kcov_remote_start_common(skb_get_kcov_handle(skb));
 
 		ieee80211_iface_process_status(sdata, skb);
 		kfree_skb(skb);
 
-		kcov_remote_stop();
 	}
 
 	/* then other type-dependent work */
--- a/net/mac80211/tx.c
+++ b/net/mac80211/tx.c
@@ -4668,19 +4668,21 @@ static void ieee80211_8023_xmit(struct i
 
 	ieee80211_aggr_check(sdata, sta, skb);
 
-	tid = skb->priority & IEEE80211_QOS_CTL_TAG1D_MASK;
-	tid_tx = rcu_dereference(sta->ampdu_mlme.tid_tx[tid]);
-	if (tid_tx) {
-		if (!test_bit(HT_AGG_STATE_OPERATIONAL, &tid_tx->state)) {
-			/* fall back to non-offload slow path */
-			__ieee80211_subif_start_xmit(skb, dev, 0,
-						     IEEE80211_TX_CTRL_MLO_LINK_UNSPEC,
-						     NULL);
-			return;
-		}
+	if (!ieee80211_hw_check(&local->hw, SUPPORTS_NSS_OFFLOAD)) {
+		tid = skb->priority & IEEE80211_QOS_CTL_TAG1D_MASK;
+		tid_tx = rcu_dereference(sta->ampdu_mlme.tid_tx[tid]);
+		if (tid_tx) {
+			if (!test_bit(HT_AGG_STATE_OPERATIONAL, &tid_tx->state)) {
+				/* fall back to non-offload slow path */
+				__ieee80211_subif_start_xmit(skb, dev, 0,
+						     	IEEE80211_TX_CTRL_MLO_LINK_UNSPEC,
+						     	NULL);
+				return;
+			}
 
-		if (tid_tx->timeout)
-			tid_tx->last_tx = jiffies;
+			if (tid_tx->timeout)
+				tid_tx->last_tx = jiffies;
+		}
 	}
 
 	skb = ieee80211_tx_skb_fixup(skb, ieee80211_sdata_netdev_features(sdata));
@@ -4739,7 +4741,7 @@ netdev_tx_t ieee80211_subif_start_xmit_8
 {
 	struct ieee80211_sub_if_data *sdata = IEEE80211_DEV_TO_SUB_IF(dev);
 	struct ethhdr *ehdr = (struct ethhdr *)skb->data;
-	struct ieee80211_key *key;
+	struct ieee80211_key *key = NULL;
 	struct sta_info *sta;
 
 #ifdef CPTCFG_MAC80211_NSS_SUPPORT
@@ -4757,9 +4759,13 @@ netdev_tx_t ieee80211_subif_start_xmit_8
 		goto out;
 	}
 
-	if (unlikely(IS_ERR_OR_NULL(sta) || !sta->uploaded ||
-	    !test_sta_flag(sta, WLAN_STA_AUTHORIZED) ||
-	    sdata->control_port_protocol == ehdr->h_proto))
+	if (ieee80211_hw_check(&sdata->local->hw, SUPPORTS_NSS_OFFLOAD)) {
+		if (unlikely(IS_ERR_OR_NULL(sta) || !sta->uploaded))
+			sta = NULL;
+		goto tx_offload;
+	} else if (unlikely(IS_ERR_OR_NULL(sta) || !sta->uploaded ||
+		   !test_sta_flag(sta, WLAN_STA_AUTHORIZED) ||
+		   sdata->control_port_protocol == ehdr->h_proto))
 		goto skip_offload;
 
 	key = rcu_dereference(sta->ptk[sta->ptk_idx]);
@@ -4770,6 +4776,7 @@ netdev_tx_t ieee80211_subif_start_xmit_8
 		goto skip_offload;
 
 	sk_pacing_shift_update(skb->sk, sdata->local->hw.tx_sk_pacing_shift);
+tx_offload:
 	ieee80211_8023_xmit(sdata, dev, sta, key, skb);
 	goto out;
 
--- a/net/mac80211/rx.c
+++ b/net/mac80211/rx.c
@@ -5342,7 +5342,7 @@ void ieee80211_rx_list(struct ieee80211_
 
 	if (pubsta) {
 		sta = container_of(pubsta, struct sta_info, sta);
-		if (sta && napi) {
+		if (sta) {
 			if (!(status->flag & RX_FLAG_ONLY_MONITOR))
 				atomic_inc(&sta->rx_drv_pkts);
 		}
@@ -5442,8 +5442,6 @@ void ieee80211_rx_list(struct ieee80211_
 
 	status->rx_flags = 0;
 
-	kcov_remote_start_common(skb_get_kcov_handle(skb));
-
 	/*
 	 * Frames with failed FCS/PLCP checksum are not returned,
 	 * all other frames are returned without radiotap header
@@ -5463,7 +5461,6 @@ void ieee80211_rx_list(struct ieee80211_
 			__ieee80211_rx_handle_packet(hw, pubsta, skb, list);
 	}
 
-	kcov_remote_stop();
 	return;
  drop:
 	kfree_skb(skb);
--- a/backport-include/linux/skbuff.h
+++ b/backport-include/linux/skbuff.h
@@ -24,14 +24,6 @@ static inline void *backport___skb_push(
 }
 #define __skb_push LINUX_BACKPORT(__skb_push)
 
-static inline void *__skb_put_zero(struct sk_buff *skb, unsigned int len)
-{
-	void *tmp = __skb_put(skb, len);
-
-	memset(tmp, 0, len);
-	return tmp;
-}
-
 static inline void *skb_put_zero(struct sk_buff *skb, unsigned int len)
 {
 	void *tmp = skb_put(skb, len);
