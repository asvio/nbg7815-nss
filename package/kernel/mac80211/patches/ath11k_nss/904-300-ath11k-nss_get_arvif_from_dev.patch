From fbe5a76d8c9ff1cf3f906a3c863928fc1adcbc95 Mon Sep 17 00:00:00 2001
From: Karthikeyan Kathirvel <kathirve@codeaurora.org>
Date: Tue, 16 Feb 2021 13:44:39 +0530
Subject: [PATCH] ath11k: Add mesh nss offload support

- New capability advertising nss offload support for mesh type
- Mesh obj vap and link vap registration/clean up
- Command/event handling
- New .ch files in ath11k for nss mesh offload related debugs
- Tx/Rx data path on mesh link vap uses native wifi format
- Mesh obj vap handls packets in ether format. No Tx on Mesh
  obj vap is expected as packets transmitted in slow path is
  supposed to be encapsulated in 802.11 format.
- New mac80211-driver callbacks for mesh vap, mpath and mpp
  configurations.

Signed-off-by: Vasanthakumar Thiagarajan <vthiagar@codeaurora.org>

Change-Id: Ib6950344286ba18fab43586262c62dcd09557614
Co-developed-by: Karthikeyan Kathirvel <kathirve@codeaurora.org>
Signed-off-by: Karthikeyan Kathirvel <kathirve@codeaurora.org>
Signed-off-by: Vasanthakumar Thiagarajan <vthiagar@codeaurora.org>
---
 drivers/net/wireless/ath/ath11k/nss.c       | 1482 ++++++++++++++++++++++++---

--- a/drivers/net/wireless/ath/ath11k/nss.c
+++ b/drivers/net/wireless/ath/ath11k/nss.c
@@ -35,6 +35,30 @@ ath11k_nss_get_vdev_opmode(struct ath11k
 	return ATH11K_NSS_OPMODE_UNKNOWN;
 }
 
+static struct ath11k_vif *ath11k_nss_get_arvif_from_dev(struct net_device *dev)
+{
+	struct wireless_dev *wdev;
+	struct ieee80211_vif *vif;
+	struct ath11k_vif *arvif;
+
+	if (!dev)
+		return NULL;
+
+	wdev = dev->ieee80211_ptr;
+	if (!wdev)
+		return NULL;
+
+	vif = wdev_to_ieee80211_vif(wdev);
+	if (!vif)
+		return NULL;
+
+	arvif = (struct ath11k_vif *)vif->drv_priv;
+	if (!arvif)
+		return NULL;
+
+	return arvif;
+}
+
 static void ath11k_nss_wifili_stats_sync(struct ath11k_base *ab,
 					 struct nss_wifili_stats_sync_msg *wlsoc_stats)
 {
@@ -294,6 +318,9 @@ void ath11k_nss_wifili_event_receive(str
 
 	switch (msg_type) {
 	case NSS_WIFILI_INIT_MSG:
+		ab->nss.response = response;
+		complete(&ab->nss.complete);
+		break;
 	case NSS_WIFILI_PDEV_INIT_MSG:
 	case NSS_WIFILI_START_MSG:
 	case NSS_WIFILI_SOC_RESET_MSG:
@@ -302,7 +329,6 @@ void ath11k_nss_wifili_event_receive(str
 		ab->nss.response = response;
 		complete(&ab->nss.complete);
 		break;
-
 	case NSS_WIFILI_PEER_CREATE_MSG:
 		if (response != NSS_CMN_RESPONSE_EMSG)
 			break;
@@ -463,7 +489,9 @@ ath11k_nss_wifili_ext_callback_fn(struct
 		ath11k_nss_process_mic_error(ab, skb);
 		break;
 	default:
-		kfree(skb);
+		ath11k_dbg(ab, ATH11K_DBG_NSS, "unknown packet type received in wifili ext cb %d",
+			    wepm->pkt_type);
+		dev_kfree_skb_any(skb);
 		break;
 	}
 }
@@ -785,24 +813,7 @@ ath11k_nss_vdev_special_data_receive(str
 	int data_offs = 0;
 	int ret = 0;
 
-	if (!dev) {
-		dev_kfree_skb_any(skb);
-		return;
-	}
-
-	wdev = dev->ieee80211_ptr;
-	if (!wdev) {
-		dev_kfree_skb_any(skb);
-		return;
-	}
-
-	vif = wdev_to_ieee80211_vif(wdev);
-	if (!vif) {
-		dev_kfree_skb_any(skb);
-		return;
-	}
-
-	arvif = (struct ath11k_vif *)vif->drv_priv;
+	arvif = ath11k_nss_get_arvif_from_dev(dev);
 	if (!arvif) {
 		dev_kfree_skb_any(skb);
 		return;
