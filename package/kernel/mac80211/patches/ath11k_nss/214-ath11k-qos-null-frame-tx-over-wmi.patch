From 0e29b669153f100b60107d5f6b3fe407b71ba79a Mon Sep 17 00:00:00 2001
From: Sowmiya Sree Elavalagan <ssreeela@codeaurora.org>
Date: Wed, 30 Sep 2020 22:33:42 +0530
Subject: [PATCH] ath11k: QOS null frame tx over wmi

Added support to send qos null frame through FW.
NSS driver does not support QOS null frame tx.
Hence this is brought for nss offload case to send 
qos null frame. QOS null packet queued from mac80211
is sent to FW through wmi interface. This happens only if FW supports
qos null tx, this is based on service bit received in ext2 service
event from FW. On successful transmission of QOS null frame status
is set 0 in the event received for this wmi message. This is status
is sent to mac80211 for further handling.

Signed-off-by: Sowmiya Sree Elavalagan <ssreeela@codeaurora.org>
---
 drivers/net/wireless/ath/ath11k/mac.c |  28 ++++-
 drivers/net/wireless/ath/ath11k/wmi.c | 200 ++++++++++++++++++++++++++--------
 drivers/net/wireless/ath/ath11k/wmi.h |  46 +++++++-
 3 files changed, 220 insertions(+), 54 deletions(-)

--- a/drivers/net/wireless/ath/ath11k/mac.c
+++ b/drivers/net/wireless/ath/ath11k/mac.c
@@ -6129,6 +6129,16 @@ static int ath11k_mac_mgmt_tx_wmi(struct
 
 	ATH11K_SKB_CB(skb)->paddr = paddr;
 
+	if (ieee80211_is_qos_nullfunc(hdr->frame_control)) {
+		ret = ath11k_wmi_qos_null_send(ar, arvif->vdev_id, buf_id, skb);
+		if (ret) {
+			ath11k_warn(ar->ab, "failed to send qos null frame over wmi: %d\n", ret);
+			goto err_unmap_buf;
+		}
+
+		return 0;
+	}
+
 	ret = ath11k_wmi_mgmt_send(ar, arvif->vdev_id, buf_id, skb);
 	if (ret) {
 		ath11k_warn(ar->ab, "failed to send mgmt frame: %d\n", ret);
@@ -6196,8 +6206,8 @@ static void ath11k_mgmt_over_wmi_tx_work
 	}
 }
 
-static int ath11k_mac_mgmt_tx(struct ath11k *ar, struct sk_buff *skb,
-			      bool is_prb_rsp)
+static int ath11k_mac_tx_over_wmi(struct ath11k *ar, struct sk_buff *skb,
+				  bool is_prb_rsp)
 {
 	struct sk_buff_head *q = &ar->wmi_mgmt_tx_queue;
 
@@ -6259,7 +6269,7 @@ static void ath11k_mac_op_tx(struct ieee
 	} else if (ieee80211_is_mgmt(hdr->frame_control)) {
 		frm_type = FIELD_GET(IEEE80211_FCTL_STYPE, hdr->frame_control);
 		is_prb_rsp = ieee80211_is_probe_resp(hdr->frame_control);
-		ret = ath11k_mac_mgmt_tx(ar, skb, is_prb_rsp);
+		ret = ath11k_mac_tx_over_wmi(ar, skb, is_prb_rsp);
 		if (ret) {
 			if (ret != -EBUSY)
 				ath11k_warn(ar->ab, "failed to queue management frame %d\n",
@@ -6274,6 +6284,20 @@ static void ath11k_mac_op_tx(struct ieee
 			spin_unlock_bh(&ar->data_lock);
 		}
 		return;
+	} else if (ar->ab->nss.enabled &&
+		   ieee80211_is_qos_nullfunc(hdr->frame_control) &&
+		   test_bit(WMI_TLV_SERVICE_QOS_NULL_FRAME_TX_OVER_WMI,
+			    ar->ab->wmi_ab.svc_map)) {
+		/* NSS driver does not support tx qos null pkt hence it is offload
+		 * to fw via wmi path similar to mgmt frames
+		 */
+		ret = ath11k_mac_tx_over_wmi(ar, skb, false);
+		if (ret) {
+			ath11k_warn(ar->ab, "failed to queue qos null frame %d\n",
+				    ret);
+			ieee80211_free_txskb(ar->hw, skb);
+		}
+		return;
 	}
 
 	if (control->sta)
--- a/drivers/net/wireless/ath/ath11k/wmi.c
+++ b/drivers/net/wireless/ath/ath11k/wmi.c
@@ -23,6 +23,7 @@
 
 struct wmi_tlv_policy {
 	size_t min_len;
+	char policy[40];
 };
 
 struct wmi_tlv_svc_ready_parse {
@@ -91,69 +92,69 @@ struct wmi_tlv_mgmt_rx_parse {
 
 static const struct wmi_tlv_policy wmi_tlv_policies[] = {
 	[WMI_TAG_ARRAY_BYTE]
-		= { .min_len = 0 },
+		= { .min_len = 0, .policy = "WMI_TAG_ARRAY_BYTE" },
 	[WMI_TAG_ARRAY_UINT32]
-		= { .min_len = 0 },
+		= { .min_len = 0, .policy = "WMI_TAG_ARRAY_UINT32" },
 	[WMI_TAG_SERVICE_READY_EVENT]
-		= { .min_len = sizeof(struct wmi_service_ready_event) },
+		= { .min_len = sizeof(struct wmi_service_ready_event), .policy = "wmi_service_ready_event" },
 	[WMI_TAG_SERVICE_READY_EXT_EVENT]
-		= { .min_len =  sizeof(struct wmi_service_ready_ext_event) },
+		= { .min_len =  sizeof(struct wmi_service_ready_ext_event), .policy = "wmi_service_ready_ext_event" },
 	[WMI_TAG_SOC_MAC_PHY_HW_MODE_CAPS]
-		= { .min_len = sizeof(struct wmi_soc_mac_phy_hw_mode_caps) },
+		= { .min_len = sizeof(struct wmi_soc_mac_phy_hw_mode_caps), .policy = "wmi_soc_mac_phy_hw_mode_caps" },
 	[WMI_TAG_SOC_HAL_REG_CAPABILITIES]
-		= { .min_len = sizeof(struct wmi_soc_hal_reg_capabilities) },
+		= { .min_len = sizeof(struct wmi_soc_hal_reg_capabilities), .policy = "wmi_soc_hal_reg_capabilities" },
 	[WMI_TAG_VDEV_START_RESPONSE_EVENT]
-		= { .min_len = sizeof(struct wmi_vdev_start_resp_event) },
+		= { .min_len = sizeof(struct wmi_vdev_start_resp_event), .policy = "wmi_vdev_start_resp_event" },
 	[WMI_TAG_PEER_DELETE_RESP_EVENT]
-		= { .min_len = sizeof(struct wmi_peer_delete_resp_event) },
+		= { .min_len = sizeof(struct wmi_peer_delete_resp_event), .policy = "wmi_peer_delete_resp_event" },
 	[WMI_TAG_OFFLOAD_BCN_TX_STATUS_EVENT]
-		= { .min_len = sizeof(struct wmi_bcn_tx_status_event) },
+		= { .min_len = sizeof(struct wmi_bcn_tx_status_event), .policy = "wmi_bcn_tx_status_event" },
 	[WMI_TAG_VDEV_STOPPED_EVENT]
-		= { .min_len = sizeof(struct wmi_vdev_stopped_event) },
+		= { .min_len = sizeof(struct wmi_vdev_stopped_event), .policy = "wmi_vdev_stopped_event" },
 	[WMI_TAG_REG_CHAN_LIST_CC_EVENT]
-		= { .min_len = sizeof(struct wmi_reg_chan_list_cc_event) },
+		= { .min_len = sizeof(struct wmi_reg_chan_list_cc_event), .policy = "wmi_reg_chan_list_cc_event" },
 	[WMI_TAG_REG_CHAN_LIST_CC_EXT_EVENT]
-		= { .min_len = sizeof(struct wmi_reg_chan_list_cc_ext_event) },
+		= { .min_len = sizeof(struct wmi_reg_chan_list_cc_ext_event), .policy = "wmi_reg_chan_list_cc_ext_event" },
 	[WMI_TAG_MGMT_RX_HDR]
-		= { .min_len = sizeof(struct wmi_mgmt_rx_hdr) },
+		= { .min_len = sizeof(struct wmi_mgmt_rx_hdr), .policy = "wmi_mgmt_rx_hdr" },
 	[WMI_TAG_MGMT_TX_COMPL_EVENT]
-		= { .min_len = sizeof(struct wmi_mgmt_tx_compl_event) },
+		= { .min_len = sizeof(struct wmi_tx_compl_event), .policy = "wmi_tx_compl_event" },
 	[WMI_TAG_SCAN_EVENT]
-		= { .min_len = sizeof(struct wmi_scan_event) },
+		= { .min_len = sizeof(struct wmi_scan_event), .policy = "wmi_scan_event" },
 	[WMI_TAG_PEER_STA_KICKOUT_EVENT]
-		= { .min_len = sizeof(struct wmi_peer_sta_kickout_event) },
+		= { .min_len = sizeof(struct wmi_peer_sta_kickout_event), .policy = "wmi_peer_sta_kickout_event" },
 	[WMI_TAG_ROAM_EVENT]
-		= { .min_len = sizeof(struct wmi_roam_event) },
+		= { .min_len = sizeof(struct wmi_roam_event), .policy = "wmi_roam_event" },
 	[WMI_TAG_CHAN_INFO_EVENT]
-		= { .min_len = sizeof(struct wmi_chan_info_event) },
+		= { .min_len = sizeof(struct wmi_chan_info_event), .policy = "wmi_chan_info_event" },
 	[WMI_TAG_PDEV_BSS_CHAN_INFO_EVENT]
-		= { .min_len = sizeof(struct wmi_pdev_bss_chan_info_event) },
+		= { .min_len = sizeof(struct wmi_pdev_bss_chan_info_event), .policy = "wmi_pdev_bss_chan_info_event" },
 	[WMI_TAG_VDEV_INSTALL_KEY_COMPLETE_EVENT]
-		= { .min_len = sizeof(struct wmi_vdev_install_key_compl_event) },
+		= { .min_len = sizeof(struct wmi_vdev_install_key_compl_event), .policy = "wmi_vdev_install_key_compl_event" },
 	[WMI_TAG_READY_EVENT] = {
-		.min_len = sizeof(struct wmi_ready_event_min) },
+		.min_len = sizeof(struct wmi_ready_event_min), .policy = "wmi_ready_event_min" },
 	[WMI_TAG_SERVICE_AVAILABLE_EVENT]
-		= {.min_len = sizeof(struct wmi_service_available_event) },
+		= {.min_len = sizeof(struct wmi_service_available_event), .policy = "wmi_service_available_event" },
 	[WMI_TAG_PEER_ASSOC_CONF_EVENT]
-		= { .min_len = sizeof(struct wmi_peer_assoc_conf_event) },
+		= { .min_len = sizeof(struct wmi_peer_assoc_conf_event), .policy = "wmi_peer_assoc_conf_event" },
 	[WMI_TAG_STATS_EVENT]
-		= { .min_len = sizeof(struct wmi_stats_event) },
+		= { .min_len = sizeof(struct wmi_stats_event), .policy = "wmi_stats_event" },
 	[WMI_TAG_PDEV_CTL_FAILSAFE_CHECK_EVENT]
-		= { .min_len = sizeof(struct wmi_pdev_ctl_failsafe_chk_event) },
+		= { .min_len = sizeof(struct wmi_pdev_ctl_failsafe_chk_event), .policy = "wmi_pdev_ctl_failsafe_chk_event" },
 	[WMI_TAG_HOST_SWFDA_EVENT] = {
-		.min_len = sizeof(struct wmi_fils_discovery_event) },
+		.min_len = sizeof(struct wmi_fils_discovery_event), .policy = "wmi_fils_discovery_event" },
 	[WMI_TAG_OFFLOAD_PRB_RSP_TX_STATUS_EVENT] = {
-		.min_len = sizeof(struct wmi_probe_resp_tx_status_event) },
+		.min_len = sizeof(struct wmi_probe_resp_tx_status_event), .policy = "wmi_probe_resp_tx_status_event" },
 	[WMI_TAG_VDEV_DELETE_RESP_EVENT] = {
-		.min_len = sizeof(struct wmi_vdev_delete_resp_event) },
+		.min_len = sizeof(struct wmi_vdev_delete_resp_event), .policy = "wmi_vdev_delete_resp_event" },
 	[WMI_TAG_OBSS_COLOR_COLLISION_EVT] = {
-		.min_len = sizeof(struct wmi_obss_color_collision_event) },
+		.min_len = sizeof(struct wmi_obss_color_collision_event), .policy = "wmi_obss_color_collision_event" },
 	[WMI_TAG_11D_NEW_COUNTRY_EVENT] = {
-		.min_len = sizeof(struct wmi_11d_new_cc_ev) },
+		.min_len = sizeof(struct wmi_11d_new_cc_ev), .policy = "wmi_11d_new_cc_ev" },
 	[WMI_TAG_PER_CHAIN_RSSI_STATS] = {
-		.min_len = sizeof(struct wmi_per_chain_rssi_stats) },
+		.min_len = sizeof(struct wmi_per_chain_rssi_stats), .policy = "wmi_per_chain_rssi_stats" },
 	[WMI_TAG_TWT_ADD_DIALOG_COMPLETE_EVENT] = {
-		.min_len = sizeof(struct wmi_twt_add_dialog_event) },
+		.min_len = sizeof(struct wmi_twt_add_dialog_event), .policy = "wmi_twt_add_dialog_event" },
 };
 
 #define PRIMAP(_hw_mode_) \
@@ -203,8 +204,8 @@ ath11k_wmi_tlv_iter(struct ath11k_base *
 		if (tlv_tag < ARRAY_SIZE(wmi_tlv_policies) &&
 		    wmi_tlv_policies[tlv_tag].min_len &&
 		    wmi_tlv_policies[tlv_tag].min_len > tlv_len) {
-			ath11k_err(ab, "wmi tlv parse failure of tag %u at byte %zd (%u bytes is less than min length %zu)\n",
-				   tlv_tag, ptr - begin, tlv_len,
+			ath11k_err(ab, "wmi tlv parse failure of tag %u (%s) at byte %zd (%u bytes is less than min length %zu)\n",
+				   tlv_tag, wmi_tlv_policies[tlv_tag].policy, ptr - begin, tlv_len,
 				   wmi_tlv_policies[tlv_tag].min_len);
 			return -EINVAL;
 		}
@@ -697,6 +698,55 @@ int ath11k_wmi_mgmt_send(struct ath11k *
 	return ret;
 }
 
+int ath11k_wmi_qos_null_send(struct ath11k *ar, u32 vdev_id, u32 buf_id,
+			     struct sk_buff *frame)
+{
+	struct ath11k_pdev_wmi *wmi = ar->wmi;
+	struct wmi_qos_null_tx_cmd *cmd;
+	struct wmi_tlv *frame_tlv;
+	struct sk_buff *skb;
+	u32 buf_len;
+	int len, ret = 0;
+
+	buf_len = frame->len < WMI_QOS_NULL_SEND_BUF_LEN ?
+		  frame->len : WMI_QOS_NULL_SEND_BUF_LEN;
+
+	len = sizeof(*cmd) + sizeof(*frame_tlv) + roundup(buf_len, 4);
+
+	skb = ath11k_wmi_alloc_skb(wmi->wmi_ab, len);
+	if (!skb)
+		return -ENOMEM;
+
+	cmd = (struct wmi_qos_null_tx_cmd *)skb->data;
+	cmd->tlv_header = FIELD_PREP(WMI_TLV_TAG, WMI_TAG_QOS_NULL_FRAME_TX_SEND) |
+			  FIELD_PREP(WMI_TLV_LEN, sizeof(*cmd) - TLV_HDR_SIZE);
+	cmd->vdev_id = vdev_id;
+	cmd->desc_id = buf_id;
+	cmd->paddr_lo = lower_32_bits(ATH11K_SKB_CB(frame)->paddr);
+	cmd->paddr_hi = upper_32_bits(ATH11K_SKB_CB(frame)->paddr);
+	cmd->frame_len = frame->len;
+	cmd->buf_len = buf_len;
+
+	frame_tlv = (struct wmi_tlv *)(skb->data + sizeof(*cmd));
+	frame_tlv->header = FIELD_PREP(WMI_TLV_TAG, WMI_TAG_ARRAY_BYTE) |
+			    FIELD_PREP(WMI_TLV_LEN, buf_len);
+
+	memcpy(frame_tlv->value, frame->data, buf_len);
+
+	ath11k_ce_byte_swap(frame_tlv->value, buf_len);
+
+	ret = ath11k_wmi_cmd_send(wmi, skb, WMI_QOS_NULL_FRAME_TX_SEND_CMDID);
+	if (ret) {
+		ath11k_warn(ar->ab,
+			    "failed to submit WMI_QOS_NULL_FRAME_TX_SEND_CMDID cmd\n");
+		dev_kfree_skb(skb);
+	}
+
+	ath11k_dbg(ar->ab, ATH11K_DBG_WMI,
+		   "wmi QOS null tx send cmd sent successfully\n");
+	return ret;
+}
+
 int ath11k_wmi_vdev_create(struct ath11k *ar, u8 *macaddr,
 			   struct vdev_create_params *param)
 {
@@ -4103,7 +4153,6 @@ ath11k_wmi_copy_resource_config(struct w
 	wmi_cfg->max_bssid_rx_filters = tg_cfg->max_bssid_rx_filters;
 	wmi_cfg->use_pdev_id = tg_cfg->use_pdev_id;
 	wmi_cfg->flag1 = tg_cfg->flag1;
-	wmi_cfg->flag1 |= WMI_RSRC_CFG_FLAG1_ACK_RSSI;
 	wmi_cfg->peer_map_unmap_v2_support = tg_cfg->peer_map_unmap_v2_support;
 	wmi_cfg->sched_params = tg_cfg->sched_params;
 	wmi_cfg->twt_ap_pdev_count = tg_cfg->twt_ap_pdev_count;
@@ -5856,8 +5905,8 @@ static int ath11k_pull_mgmt_rx_params_tl
 	return 0;
 }
 
-static int wmi_process_mgmt_tx_comp(struct ath11k *ar,
-				    struct wmi_mgmt_tx_compl_event *tx_compl_param)
+static int wmi_process_tx_comp(struct ath11k *ar,
+				    struct wmi_tx_compl_event *tx_compl_param)
 {
 	struct sk_buff *msdu;
 	struct ieee80211_tx_info *info;
@@ -5895,6 +5944,11 @@ static int wmi_process_mgmt_tx_comp(stru
 			info->status.ack_signal = tx_compl_param->ack_rssi;
 	}
 
+	/* dont update rates in this path, qos null data tx completions also can
+	 * take this path in case of nss offload and can update invalid rates.
+	 */
+	info->status.rates[0].idx = -1;
+
 	hdr = (struct ieee80211_hdr *)msdu->data;
 	frm_type = FIELD_GET(IEEE80211_FCTL_STYPE, hdr->frame_control);
 
@@ -5913,10 +5967,13 @@ static int wmi_process_mgmt_tx_comp(stru
 	arvif = ath11k_vif_to_arvif(vif);
 	mgmt_stats = &arvif->mgmt_stats;
 
-	if (!tx_compl_param->status)
-		mgmt_stats->tx_compl_succ[frm_type]++;
-	else
-		mgmt_stats->tx_compl_fail[frm_type]++;
+	if (ieee80211_is_mgmt(hdr->frame_control)) {
+		if (!tx_compl_param->status)
+			mgmt_stats->tx_compl_succ[frm_type]++;
+		else
+			mgmt_stats->tx_compl_fail[frm_type]++;
+	}
+
 	spin_unlock_bh(&ar->data_lock);
 
 skip_mgmt_stats:
@@ -5938,12 +5995,13 @@ skip_mgmt_stats:
 	return 0;
 }
 
-static int ath11k_pull_mgmt_tx_compl_param_tlv(struct ath11k_base *ab,
-					       struct sk_buff *skb,
-					       struct wmi_mgmt_tx_compl_event *param)
+static int ath11k_pull_tx_compl_param_tlv(struct ath11k_base *ab,
+					  struct sk_buff *skb,
+					  struct wmi_tx_compl_event *param,
+					  int event_id)
 {
 	const void **tb;
-	const struct wmi_mgmt_tx_compl_event *ev;
+	const struct wmi_tx_compl_event *ev;
 	int ret;
 
 	tb = ath11k_wmi_tlv_parse_alloc(ab, skb->data, skb->len, GFP_ATOMIC);
@@ -5953,7 +6011,7 @@ static int ath11k_pull_mgmt_tx_compl_par
 		return ret;
 	}
 
-	ev = tb[WMI_TAG_MGMT_TX_COMPL_EVENT];
+	ev = tb[event_id];
 	if (!ev) {
 		ath11k_warn(ab, "failed to fetch mgmt tx compl ev");
 		kfree(tb);
@@ -7730,10 +7788,11 @@ exit:
 
 static void ath11k_mgmt_tx_compl_event(struct ath11k_base *ab, struct sk_buff *skb)
 {
-	struct wmi_mgmt_tx_compl_event tx_compl_param = {0};
+	struct wmi_tx_compl_event tx_compl_param = {0};
 	struct ath11k *ar;
 
-	if (ath11k_pull_mgmt_tx_compl_param_tlv(ab, skb, &tx_compl_param) != 0) {
+	if (ath11k_pull_tx_compl_param_tlv(ab, skb, &tx_compl_param,
+					   WMI_TAG_MGMT_TX_COMPL_EVENT) != 0) {
 		ath11k_warn(ab, "failed to extract mgmt tx compl event");
 		return;
 	}
@@ -7746,7 +7805,7 @@ static void ath11k_mgmt_tx_compl_event(s
 		goto exit;
 	}
 
-	wmi_process_mgmt_tx_comp(ar, &tx_compl_param);
+	wmi_process_tx_comp(ar, &tx_compl_param);
 
 	ath11k_dbg(ab, ATH11K_DBG_MGMT,
 		   "event mgmt tx compl ev pdev_id %d, desc_id %d, status %d ack_rssi %d",
@@ -7757,6 +7816,36 @@ exit:
 	rcu_read_unlock();
 }
 
+static void ath11k_qos_null_compl_event(struct ath11k_base *ab, struct sk_buff *skb)
+{
+	struct wmi_tx_compl_event tx_compl_param = {0};
+	struct ath11k *ar;
+
+	if (ath11k_pull_tx_compl_param_tlv(ab, skb, &tx_compl_param,
+					   WMI_TAG_QOS_NULL_FRAME_TX_STATUS) != 0) {
+		ath11k_warn(ab, "failed to extract qos null tx compl event");
+		return;
+	}
+
+	rcu_read_lock();
+	ar = ath11k_mac_get_ar_by_pdev_id(ab, tx_compl_param.pdev_id);
+	if (!ar) {
+		ath11k_warn(ab, "invalid pdev id %d in qos_null_tx_compl_event\n",
+			    tx_compl_param.pdev_id);
+		goto exit;
+	}
+
+	wmi_process_tx_comp(ar, &tx_compl_param);
+
+	ath11k_dbg(ab, ATH11K_DBG_WMI,
+		   "QOS null tx compl ev pdev_id %d, desc_id %d, status %d",
+		   tx_compl_param.pdev_id, tx_compl_param.desc_id,
+		   tx_compl_param.status);
+
+exit:
+	rcu_read_unlock();
+}
+
 static struct ath11k *ath11k_get_ar_on_scan_state(struct ath11k_base *ab,
 						  u32 vdev_id,
 						  enum ath11k_scan_state state)
@@ -8843,6 +8932,9 @@ static void ath11k_wmi_tlv_op_rx(struct
 	case WMI_GTK_OFFLOAD_STATUS_EVENTID:
 		ath11k_wmi_gtk_offload_status_event(ab, skb);
 		break;
+	case WMI_QOS_NULL_FRAME_TX_COMPLETION_EVENTID:
+		ath11k_qos_null_compl_event(ab, skb);
+		break;
 	default:
 		ath11k_dbg(ab, ATH11K_DBG_WMI, "unsupported event id 0x%x\n", id);
 		break;
--- a/drivers/net/wireless/ath/ath11k/wmi.h
+++ b/drivers/net/wireless/ath/ath11k/wmi.h
@@ -363,6 +363,7 @@ enum wmi_tlv_cmd_id {
 	WMI_BSS_COLOR_CHANGE_ENABLE_CMDID,
 	WMI_VDEV_BCN_OFFLOAD_QUIET_CONFIG_CMDID,
 	WMI_FILS_DISCOVERY_TMPL_CMDID,
+	WMI_QOS_NULL_FRAME_TX_SEND_CMDID,
 	WMI_ADDBA_CLEAR_RESP_CMDID = WMI_TLV_CMD(WMI_GRP_BA_NEG),
 	WMI_ADDBA_SEND_CMDID,
 	WMI_ADDBA_STATUS_CMDID,
@@ -693,6 +694,8 @@ enum wmi_tlv_event_id {
 	WMI_TBTTOFFSET_EXT_UPDATE_EVENTID,
 	WMI_OFFCHAN_DATA_TX_COMPLETION_EVENTID,
 	WMI_HOST_FILS_DISCOVERY_EVENTID,
+	WMI_HOST_SWBA_V2_EVENTID,
+	WMI_QOS_NULL_FRAME_TX_COMPLETION_EVENTID,
 	WMI_TX_DELBA_COMPLETE_EVENTID = WMI_TLV_CMD(WMI_GRP_BA_NEG),
 	WMI_TX_ADDBA_COMPLETE_EVENTID,
 	WMI_BA_RSP_SSN_EVENTID,
@@ -1880,6 +1883,9 @@ enum wmi_tlv_tag {
 	WMI_TAG_REG_CHAN_LIST_CC_EXT_EVENT,
 	WMI_TAG_PDEV_SET_BIOS_SAR_TABLE_CMD = 0x3D8,
 	WMI_TAG_PDEV_SET_BIOS_GEO_TABLE_CMD,
+	/* TODO add all the missing cmds */
+	WMI_TAG_QOS_NULL_FRAME_TX_SEND = 0x3A6,
+	WMI_TAG_QOS_NULL_FRAME_TX_STATUS,
 	WMI_TAG_MAX
 };
 
@@ -2107,7 +2113,17 @@ enum wmi_tlv_service {
 	WMI_TLV_SERVICE_PEER_POWER_SAVE_DURATION_SUPPORT = 246,
 	WMI_TLV_SERVICE_SRG_SRP_SPATIAL_REUSE_SUPPORT = 249,
 	WMI_TLV_SERVICE_MBSS_PARAM_IN_VDEV_START_SUPPORT = 253,
+	WMI_TLV_SERVICE_CONFIGURE_ROAM_TRIGGER_PARAM_SUPPORT = 254,
+	WMI_TLV_SERVICE_CFR_TA_RA_AS_FP_SUPPORT = 255,
+	WMI_TLV_SERVICE_CFR_CAPTURE_COUNT_SUPPORT = 256,
+	WMI_TLV_SERVICE_OCV_SUPPORT = 257,
+	WMI_TLV_SERVICE_LL_STATS_PER_CHAN_RX_TX_TIME_SUPPORT = 258,
+	WMI_TLV_SERVICE_THERMAL_MULTI_CLIENT_SUPPORT = 259,
+	WMI_TLV_SERVICE_NAN_SEND_NAN_ENABLE_RESPONSE_TO_HOST = 260,
+	WMI_TLV_SERVICE_UNIFIED_LL_GET_STA_CMD_SUPPORT = 261,
+	WMI_TLV_SERVICE_FSE_CMEM_ALLOC_SUPPORT = 262,
 	WMI_TLV_SERVICE_PASSIVE_SCAN_START_TIME_ENHANCE = 263,
+	WMI_TLV_SERVICE_QOS_NULL_FRAME_TX_OVER_WMI = 264,
 
 	/* The second 128 bits */
 	WMI_MAX_EXT_SERVICE = 256,
@@ -3814,6 +3830,7 @@ struct wmi_scan_prob_req_oui_cmd {
 }  __packed;
 
 #define WMI_MGMT_SEND_DOWNLD_LEN	64
+#define WMI_QOS_NULL_SEND_BUF_LEN	64
 
 #define WMI_TX_PARAMS_DWORD0_POWER		GENMASK(7, 0)
 #define WMI_TX_PARAMS_DWORD0_MCS_MASK		GENMASK(19, 8)
@@ -3824,9 +3841,10 @@ struct wmi_scan_prob_req_oui_cmd {
 #define WMI_TX_PARAMS_DWORD1_BW_MASK		GENMASK(14, 8)
 #define WMI_TX_PARAMS_DWORD1_PREAMBLE_TYPE	GENMASK(19, 15)
 #define WMI_TX_PARAMS_DWORD1_FRAME_TYPE		BIT(20)
-#define WMI_TX_PARAMS_DWORD1_RSVD		GENMASK(31, 21)
+#define WMI_TX_PARAMS_DWORD1_CFR_CAPTURE	BIT(21)
+#define WMI_TX_PARAMS_DWORD1_RSVD		GENMASK(31, 22)
 
-struct wmi_mgmt_send_params {
+struct wmi_tx_send_params {
 	u32 tlv_header;
 	u32 tx_params_dword0;
 	u32 tx_params_dword1;
@@ -4570,7 +4588,6 @@ struct wmi_pdev_bss_chan_info_event {
 	u32 rx_bss_cycle_count_low;
 	u32 rx_bss_cycle_count_high;
 	u32 pdev_id;
-	u32 ack_rssi;
 } __packed;
 
 #define WMI_VDEV_INSTALL_KEY_COMPL_STATUS_SUCCESS 0
@@ -4918,7 +4935,7 @@ struct wmi_rssi_ctl_ext {
 	u32 rssi_ctl_ext[MAX_ANTENNA_EIGHT - ATH_MAX_ANTENNA];
 };
 
-struct wmi_mgmt_tx_compl_event {
+struct wmi_tx_compl_event {
 	u32 desc_id;
 	u32 status;
 	u32 pdev_id;
@@ -5748,6 +5765,17 @@ struct wmi_debug_log_config_cmd_fixed_pa
 	u32 value;
 } __packed;
 
+struct wmi_qos_null_tx_cmd {
+	u32 tlv_header;
+	u32 vdev_id;
+	u32 desc_id;
+	u32 paddr_lo;
+	u32 paddr_hi;
+	u32 frame_len;
+	u32 buf_len;
+	u32 tx_params_valid;
+} __packed;
+
 #define WMI_MAX_MEM_REQS 32
 
 #define MAX_RADIOS 3
@@ -6358,6 +6386,8 @@ int ath11k_wmi_cmd_send(struct ath11k_pd
 struct sk_buff *ath11k_wmi_alloc_skb(struct ath11k_wmi_base *wmi_sc, u32 len);
 int ath11k_wmi_mgmt_send(struct ath11k *ar, u32 vdev_id, u32 buf_id,
 			 struct sk_buff *frame);
+int ath11k_wmi_qos_null_send(struct ath11k *ar, u32 vdev_id, u32 buf_id,
+			     struct sk_buff *frame);
 int ath11k_wmi_bcn_tmpl(struct ath11k *ar, u32 vdev_id,
 			struct ieee80211_mutable_offsets *offs,
 			struct sk_buff *bcn, u32 ema_param);
